import os
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Chat
from telegram.ext import ContextTypes
from dotenv import load_dotenv
import google.generativeai as genai

load_dotenv()
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
else:
    print("–û—à–∏–±–∫–∞: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Gemini –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
if not TELEGRAM_CHAT_ID:
    print("–û—à–∏–±–∫–∞: TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

last_request_time = 0
MIN_DELAY_SECONDS = 60

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ, –∫—É–ª—å—Ç—É—Ä–Ω–æ, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω—ã–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–º —è–∑—ã–∫–æ–º. "
    "–ö–∞–∂–¥—ã–π —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º. "
)

async def _get_gemini_response(user_text):
    global last_request_time

    current_time = time.time()
    if current_time - last_request_time < MIN_DELAY_SECONDS:
        remaining_time = int(MIN_DELAY_SECONDS - (current_time - last_request_time))
        return f"–ø–æ—á–µ–∫–∞–π —Ç—Ä–æ—Ö–∏ ü´© –≤—ñ–¥–ø–æ—á–∏–Ω—É {remaining_time}"

    if not GEMINI_API_KEY:
        return "—Å–æ—Ä—è–Ω, –∞–ª–µ –≤ –º–µ–Ω–µ –ø–µ—Ä–µ—Ä–≤–∞"

    try:
        model_name = 'gemini-1.5-flash'
        model = genai.GenerativeModel(model_name)
        combined_prompt = f"{SYSTEM_PROMPT}\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_text}\n–ë–æ—Ç:"
        response = model.generate_content(combined_prompt)
        reply = response.text.strip()
        last_request_time = time.time()
        return reply

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini API: {e}")
        return "—à–æ—Å—å –Ω–µ –ø—Ä–∞—Ü—é—î"

async def _check_and_reply_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not TELEGRAM_CHAT_ID:
        await update.message.reply_text("–Ω–µ –º–æ–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É")
        return False
        
    try:
        chat_member = await context.bot.get_chat_member(chat_id=int(TELEGRAM_CHAT_ID), user_id=user_id)
        if chat_member.status not in ["member", "creator", "administrator"]:
            keyboard = [[InlineKeyboardButton("Íú∞ ‚òª‚Äå  Ä ·¥ú  ç", url="https://t.me/+7Xmj6pPB0mEyMDky")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "—Ç—ñ–ª—å–∫–∏ –¥–ª—è —á–ª–µ–Ω—ñ–≤ –∫–ª—É–±—É",
                reply_markup=reply_markup
            )
            return False
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        await update.message.reply_text("–Ω–µ –º–æ–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É")
        return False
    
    return True

async def handle_gemini_message_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ª–æ–≤–æ "–∞–ª–æ".
    """
    if not await _check_and_reply_subscription(update, context):
        return

    await update.message.reply_chat_action("typing")
    user_text = update.message.text
    reply = await _get_gemini_response(user_text)
    
    if reply:
        await update.message.reply_text(
            reply,
            message_thread_id=update.message.message_thread_id
        )

async def handle_gemini_message_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.
    """
    if context.user_data.get('state') == 'support':
        return

    user_text = update.message.text
    
    if user_text and user_text.startswith('/'):
        return
    
    if not await _check_and_reply_subscription(update, context):
        return

    await update.message.reply_chat_action("typing")
    reply = await _get_gemini_response(user_text)

    if reply:
        await update.message.reply_text(reply)
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from dotenv import load_dotenv

load_dotenv()
ADMIN_ID = os.getenv('ADMIN_ID')
if not ADMIN_ID:
    print("–û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ. –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

from ai import handle_gemini_message_private

async def _delete_message_job(context: ContextTypes.DEFAULT_TYPE):
    """A job to delete a single message."""
    chat_id = context.job.data.get('chat_id')
    message_id = context.job.data.get('message_id')
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"Error deleting message {message_id}: {e}")

async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles the /support command, sends a button, and schedules message cleanup.
    """
    keyboard = [[InlineKeyboardButton("‚ùìÍú±·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/MORSTRIXBOT?start=support")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    bot_message = await update.message.reply_text(
        "–∑·¥Äx·¥è–¥—å", 
        reply_markup=reply_markup,
        message_thread_id=update.message.message_thread_id
    )
    
    # Schedule deletion for user's command after 15 seconds
    context.job_queue.run_once(
        _delete_message_job, 
        15, 
        data={'chat_id': update.effective_chat.id, 'message_id': update.message.message_id},
        name=f'del_support_user_{update.message.message_id}'
    )
    # Schedule deletion for bot's reply after 15 seconds
    context.job_queue.run_once(
        _delete_message_job, 
        15, 
        data={'chat_id': update.effective_chat.id, 'message_id': bot_message.message_id},
        name=f'del_support_bot_{bot_message.message_id}'
    )

async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ª–∏–±–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ª–∏–±–æ –≤ AI.
    """
    user_id = str(update.effective_user.id)

    if user_id == ADMIN_ID and context.user_data.get('state') == 'support':
        await reply_to_user(update, context)
        return
    
    if context.user_data.get('state') == 'support':
        await forward_to_admin(update, context)
        context.user_data['state'] = 'ai'
        
    else:
        await handle_gemini_message_private(update, context)


async def forward_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å –µ–º—É.
    """
    if not ADMIN_ID:
        return

    user = update.effective_user
    message = update.message
    
    keyboard = [[InlineKeyboardButton("‚ö†Ô∏è", callback_data=f"reply_to_{user.id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    caption = f"ü´•‚ùì @{user.username} ({user.full_name}):"
    
    try:
        if message.photo:
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=message.photo[-1].file_id,
                caption=caption,
                reply_markup=reply_markup
            )
        elif message.document:
            await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=message.document.file_id,
                caption=caption,
                reply_markup=reply_markup
            )
        else:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"{caption}\n\n{message.text}",
                reply_markup=reply_markup
            )
        await update.message.reply_text("‚úÖ –≤i–¥–ø·¥ò·¥Ä–≤·¥ß·¥á–Ω·¥è!")

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await update.message.reply_text("–Ω–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    if not ADMIN_ID:
        return
        
    admin_id = int(ADMIN_ID)
    if update.effective_user.id != admin_id:
        return

    user_to_reply_id = context.user_data.get('reply_user_id')
    if not user_to_reply_id:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏' —â–µ —Ä–∞–∑.")
        return
    
    reply_text = f" ç…µ‚Äå Ä·îï·¥õ Ä…™íâΩ: {update.message.text}"
    
    try:
        keyboard = [[InlineKeyboardButton("‚ö†Ô∏è", callback_data=f"reply_to_{user_to_reply_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=user_to_reply_id, text=reply_text, reply_markup=reply_markup)
        await update.message.reply_text("‚úÖ –≤i–¥–ø·¥ò·¥Ä–≤·¥ß·¥á–Ω·¥è!")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. {e}")

    context.user_data.pop('reply_user_id', None)
    context.user_data['state'] = 'ai'


async def handle_reply_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏" —è–∫ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Ç–∞–∫ —ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    callback_data = query.data.split('_')
    
    user_to_reply_id = callback_data[-1]

    if user_id == ADMIN_ID:
        context.user_data['reply_user_id'] = user_to_reply_id
        context.user_data['state'] = 'support'
        await context.bot.send_message(
            chat_id=ADMIN_ID, 
            text="·¥ã·¥Ä—Ç·¥Ä–π ·¥è–¥–Ω–∏–º ·¥Ñ·¥ß·¥è–≤·¥è·¥ç",
        )
    else:
        context.user_data['state'] = 'support'
        await context.bot.send_message(
            chat_id=user_id, 
            text="·¥ã·¥Ä—Ç·¥Ä–π ·¥è–¥–Ω–∏–º ·¥Ñ·¥ß·¥è–≤·¥è·¥ç",
        )
from deep_translator import GoogleTranslator, exceptions
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode

# FIX: –í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ (os, load_dotenv, langdetect)

# –°—Ç–∞–Ω –¥–ª—è ConversationHandler
TRANSLATE_STATE = 1

async def translate_text_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /translate, –≤–∏–¥–∞–ª—è—î —ó—ó —Ç–∞ –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.
    """
    try:
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=update.message.message_id
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /translate: {e}")

    reply_message = await update.effective_chat.send_message(
        "—Å–ª—É—Ö",
        message_thread_id=update.message.message_thread_id
    )
    context.user_data['reply_message_id'] = reply_message.message_id
    
    return TRANSLATE_STATE

async def handle_translation_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç, –≤–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    text_to_translate = update.message.text.strip()
    
    if not text_to_translate:
        await update.message.reply_text("–≤–∏ –Ω–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç")
        return ConversationHandler.END

    try:
        translator = GoogleTranslator(source='auto', target='en')
        translated_text = translator.translate(text_to_translate)
        
        if translated_text:
            # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è MarkdownV2
            escaped_text = translated_text.replace('`', '\\`').replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
            
            await update.message.reply_text(
                text=f"```\n{escaped_text}\n```", 
                parse_mode=ParseMode.MARKDOWN_V2,
                message_thread_id=update.message.message_thread_id
            )
            try:
                await update.message.delete()
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            
            reply_message_id = context.user_data.get('reply_message_id')
            if reply_message_id:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=reply_message_id
                    )
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")
        else:
            await update.message.reply_text("–ø–æ–º–∏–ª–∫–∞ ü§∑ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç")

    except exceptions.NotValidPayload:
        await update.message.reply_text("–ø–æ–º–∏–ª–∫–∞ ü§∑ –Ω–µ –º–æ–∂—É –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ü–µ–π —Ç–µ–∫—Å—Ç")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {e}")
        await update.message.reply_text("—à–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑")
    
    context.user_data.pop('reply_message_id', None)
    return ConversationHandler.END

# FIX: –í–∏–¥–∞–ª–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é auto_translate_en_to_ua
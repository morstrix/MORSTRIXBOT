import os
import requests
from collections import Counter
from telegram.ext import ContextTypes
from dotenv import load_dotenv
from telegram import Update

load_dotenv()
OPENWEATHERMAP_API_KEY = os.getenv('OPENWEATHERMAP_API_KEY')
CITY_LAT = 50.45  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ö–∏—î–≤–∞
CITY_LON = 30.52


def _get_wind_summary(period_data):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –∑–∞ –ø–µ—Ä—ñ–æ–¥, –≤–∏–∑–Ω–∞—á–∞—î –ø–µ—Ä–µ–≤–∞–∂–Ω–∏–π —Å—Ç–∞–Ω –≤—ñ—Ç—Ä—É
    —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂ (–µ–º–æ–¥–∑—ñ, —Å–ª–æ–≤–æ, —Å–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å).
    """
    if not period_data:
        return "üí®", "–Ω–µ–≤—ñ–¥–æ–º–æ", "N/A"

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å–µ—Ä–µ–¥–Ω—é —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É
    wind_speeds = [item['wind']['speed'] for item in period_data]
    avg_speed = sum(wind_speeds) / len(wind_speeds)
    rounded_speed = round(avg_speed, 1)

    # –í–∏–±–∏—Ä–∞—î–º–æ –µ–º–æ–¥–∑—ñ —Ç–∞ –æ–ø–∏—Å –≤—ñ—Ç—Ä—É
    if avg_speed <= 3.0:
        emoji, word = ("üí®", "—à—Ç–∏–ª—å")
    elif 3.5 < avg_speed <= 5.0:
        emoji, word = ("üí®", "–±—Ä–∏–∑")
    elif 5.5 < avg_speed <= 10.0:
        emoji, word = ("üí®", "—Ñ—Ä–µ—à")
    else:  # avg_speed > 10.8
        emoji, word = ("üåÄ", "—à–∫–≤–∞–ª")

    return emoji, word, f"‚âà{rounded_speed} –º/—Å"


def _get_period_summary(period_data, period_name):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –∑–∞ –ø–µ—Ä—ñ–æ–¥, –≤–∏–∑–Ω–∞—á–∞—î –ø–µ—Ä–µ–≤–∞–∂–Ω—É –ø–æ–≥–æ–¥—É –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ –æ–ø–∞–¥–∏
    —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂ (–µ–º–æ–¥–∑—ñ, —Å–ª–æ–≤–æ –ø–æ–≥–æ–¥–∏, –¥—ñ–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä).
    """
    if not period_data:
        return "ü§∑", "–Ω–µ–≤—ñ–¥–æ–º–æ", "N/A"

    # 1. –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
    temps = [item['main']['temp'] for item in period_data]
    temp_range = f"{round(min(temps))}/{round(max(temps))} ¬∞C"

    # 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–∂–Ω—É –ø–æ–≥–æ–¥—É –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    conditions = [item['weather'][0]['main'].lower() for item in period_data]
    
    # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç ‚Ññ1: –ì—Ä–æ–∑–∞, —Å–Ω—ñ–≥, –¥–æ—â. –Ø–∫—â–æ —î —Ö–æ—á –æ–¥–∏–Ω, –ø–æ–∫–∞–∑—É—î–º–æ –π–æ–≥–æ.
    priority_condition = None
    if 'thunderstorm' in conditions:
        priority_condition = 'thunderstorm'
    elif 'snow' in conditions:
        priority_condition = 'snow'
    elif 'rain' in conditions or 'drizzle' in conditions:
        priority_condition = 'rain'
    
    # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç ‚Ññ2: –Ø–∫—â–æ –æ–ø–∞–¥—ñ–≤ –Ω–µ–º–∞—î, –≤–∏–∑–Ω–∞—á–∞—î–º–æ, —â–æ –ø–µ—Ä–µ–≤–∞–∂–∞—î ‚Äî —Ö–º–∞—Ä–∏ —á–∏ —Å–æ–Ω—Ü–µ.
    if priority_condition:
        dominant_condition = priority_condition
    else:
        # –†–∞—Ö—É—î–º–æ, —è–∫–∞ –ø–æ–≥–æ–¥–∞ –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è —á–∞—Å—Ç—ñ—à–µ
        condition_counts = Counter(conditions)
        # `most_common(1)` –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∑ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ç–µ–∂—É [('condition', count)]
        dominant_condition = condition_counts.most_common(1)[0][0]

    # 3. –í–∏–±–∏—Ä–∞—î–º–æ –µ–º–æ–¥–∑—ñ —Ç–∞ –æ–ø–∏—Å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —á–∞—Å—É –¥–æ–±–∏ –¥–ª—è —Ö–º–∞—Ä–Ω–æ—Å—Ç—ñ
    emoji_map = {
        'thunderstorm': ("‚õàÔ∏è", "–≥—Ä–æ–∑–∞"),
        'snow': ("‚ùÑÔ∏è", "—Å–Ω—ñ–≥"),
        'rain': ("‚òîÔ∏è", "–¥–æ—â"),
        'drizzle': ("‚òîÔ∏è", "–¥–æ—â"),
        'mist': ("üå´Ô∏è", "—Ç—É–º–∞–Ω"),
        'fog': ("üå´Ô∏è", "—Ç—É–º–∞–Ω"),
        'clear': ("‚òÄÔ∏è", "—è—Å–Ω–æ"),
    }

    if dominant_condition == 'clouds':
        if period_name == 'morning':
            emoji, word = ("‚õÖÔ∏è", "—Ö–º–∞—Ä–Ω–æ")
        elif period_name == 'day':
            emoji, word = ("üå§Ô∏è", "—Ö–º–∞—Ä–Ω–æ")
        elif period_name == 'evening':
            emoji, word = ("üå•Ô∏è", "—Ö–º–∞—Ä–Ω–æ")
        else:
            emoji, word = ("‚òÅÔ∏è", "—Ö–º–∞—Ä–Ω–æ")
    else:
        emoji, word = emoji_map.get(dominant_condition, ("ü§∑", "–Ω–µ–≤—ñ–¥–æ–º–æ"))

    return emoji, word, temp_range


def get_weather_forecast():
    """
    –û—Ç—Ä–∏–º—É—î —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ —É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É —Å—Ç–∏–ª—ñ, –≤–∫–ª—é—á–∞—é—á–∏ –≤—ñ—Ç–µ—Ä.
    """
    if not OPENWEATHERMAP_API_KEY:
        return "–ü–æ–º–∏–ª–∫–∞: –ö–ª—é—á API –¥–ª—è OpenWeatherMap –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    url = f"https://api.openweathermap.org/data/2.5/forecast?lat={CITY_LAT}&lon={CITY_LON}&appid={OPENWEATHERMAP_API_KEY}&units=metric&lang=ua&cnt=8"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        if data.get('cod') == '200':
            forecast_list = data['list']
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–∞–Ω–∫—É, –¥–Ω—è —Ç–∞ –≤–µ—á–æ—Ä–∞
            morning_data = forecast_list[0:2]
            day_data = forecast_list[2:4]
            evening_data = forecast_list[4:6]
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏
            morning_emoji, morning_word, morning_temp = _get_period_summary(morning_data, 'morning')
            day_emoji, day_word, day_temp = _get_period_summary(day_data, 'day')
            evening_emoji, evening_word, evening_temp = _get_period_summary(evening_data, 'evening')
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –≤—ñ—Ç—Ä—É
            morning_wind_emoji, morning_wind_word, morning_wind_speed = _get_wind_summary(morning_data)
            day_wind_emoji, day_wind_word, day_wind_speed = _get_wind_summary(day_data)
            evening_wind_emoji, evening_wind_word, evening_wind_speed = _get_wind_summary(evening_data)

            return (
                f"‚Ä¢ ·¥ò·¥Ä–Ω·¥è·¥ã\n  {morning_emoji} {morning_word} {morning_temp}\n  {morning_wind_emoji} {morning_wind_word} {morning_wind_speed}\n\n"
                f"‚Ä¢ –¥·¥á–Ω—å\n  {day_emoji} {day_word} {day_temp}\n  {day_wind_emoji} {day_wind_word} {day_wind_speed}\n\n"
                f"‚Ä¢ –≤·¥á—ái·¥ò\n  {evening_emoji} {evening_word} {evening_temp}\n  {evening_wind_emoji} {evening_wind_word} {evening_wind_speed}"
            )
        else:
            return "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏."
            
    except requests.exceptions.RequestException as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ OpenWeather API: {e}")
        return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏."


async def delete_message_job(context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–∫–∞–∑–∞–Ω–µ –≤ job.data."""
    chat_id = context.job.data.get('chat_id')
    message_id = context.job.data.get('message_id')
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–∞—Ç—É {chat_id}.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")


async def post_weather_job(context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞–¥—Å–∏–ª–∞—î —â–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ —Ç–∞ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –π–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 4 –≥–æ–¥–∏–Ω–∏.
    """
    chat_id = context.job.data.get('chat_id')
    message_thread_id = context.job.data.get('message_thread_id')
    message_text = get_weather_forecast()
    
    try:
        sent_message = await context.bot.send_message(
            chat_id=chat_id, 
            text=message_text, 
            message_thread_id=message_thread_id
        )
        # –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 4 –≥–æ–¥–∏–Ω–∏ (14400 —Å–µ–∫—É–Ω–¥)
        context.job_queue.run_once(
            delete_message_job, 
            14400, 
            data={'chat_id': chat_id, 'message_id': sent_message.message_id}
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏: {e}")


async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∫–æ–º–∞–Ω–¥—É /weather, –Ω–∞–¥—Å–∏–ª–∞—é—á–∏ –ø—Ä–æ–≥–Ω–æ–∑."""
    await update.message.reply_chat_action("typing")
    await update.message.reply_text(
        text=get_weather_forecast()
    )